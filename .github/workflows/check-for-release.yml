name: check-for-release
run-name: Checking if there is a new hadoop release
on:
  push:
    branches:
      - main
      - dev
#  schedule:
#    - cron: "0 6 * * *"
#  workflow_dispatch:
jobs:
  check-for-new-release:
    runs-on: ubuntu-latest
    steps:
      - name: Cache hadoop git repo
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/hadoop
          key: hadoop-repo
          restore-keys: hadoop-repo
      - name: Checkout this repo
        uses: actions/checkout@v5
        with:
          path: checker
      - name: Checkout hadoop repo
        uses: actions/checkout@v5
        with:
          # https://github.com/actions/checkout
          repository: apache/hadoop
          ref: branch-3.3.6
          path: hadoop
      - name: Output debug info pre
        run: |
          echo -n Dir:
          pwd
          echo Sublistings:
          ls -la ./*
      - name: Fetch release version
        id: git-check
        run: |
          cd hadoop
          echo "Dir: $(pwd)"
          git fetch origin 'refs/tags/*:refs/tags/*'
          git --no-pager tag
          git --no-pager tag -l 'rel/*release-*' | grep -v "rel/release-X.Y.Z"
          current_release_version=$(cat ../checker/current-release.txt)
          next_release_version=$(git --no-pager tag -l 'rel/*release-*' | grep -v "rel/release-X.Y.Z" | grep -A 1 ${current_release_version} | tail -1)
          echo "current_release_version=${current_release_version}, next_release_version=${next_release_version}"
          echo modified=$([[ "${current_release_version}" == ${next_release_version} ]] && echo "false" || echo "true") > $GITHUB_STATE
          echo ${next_release_version} > ../checker/current-release.txt
#      - name: Check for modified files
#        id: git-check
#        run: |
#          cd checker
#          cat $GITHUB_STATE
#          echo modified=$((git status --porcelain | grep -E '^\sM\s') && echo "true" || echo "false") > $GITHUB_STATE
      - name: Commit latest release version
        if: steps.git-check.outputs.modified == 'true'
        run: |
          cd checker
          git config --global user.name 'Update check pipeline'
          git config --global user.email 'actions@localhost.localdomain'
          echo "Adding modified files"
          git add -A
          echo "Creating commit"
          git commit -am "Updating latest detected release version to $(cat current-release.txt)"
          echo "Pushing main"
          # git push
          echo "Creating tag $(cat current-release.txt)"
          git tag -a "$(cat current-release.txt)" -m "Trigger tag for $(cat current-release.txt) source branch"
          echo "Pushing tag"
          # git push origin "$(cat current-release.txt)"
