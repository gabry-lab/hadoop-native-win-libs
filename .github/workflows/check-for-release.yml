name: check-for-release
run-name: Checking if there is a new hadoop release
on:
  push:
    branches:
      - main
#  schedule:
#    - cron: "0 6 * * *"
jobs:
  check-for-new-release:
    runs-on: ubuntu-latest
    steps:
      - name: Cache hadoop git repo
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/hadoop
          key: hadoop-repo
          restore-keys: hadoop-repo
      - name: Checkout this repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.REPO_SCOPED_TOKEN }}
          path: checker
      - name: Checkout hadoop repo
        uses: actions/checkout@v4
        #if: ${{ hashFiles('hadoop/pom.xml') != '' }}
        with:
          repository: apache/hadoop
          path: hadoop
      - name: Output debug info pre
        run: |
          echo -n Dir:
          pwd
          echo Sublistings:
          ls -la ./*
      - name: Fetch release version
        run: |
          cd hadoop
          echo "Dir: $(pwd)"
          git fetch origin 'refs/tags/*:refs/tags/*'
          git tag --sort=-creatordate
          git tag --sort=-creatordate -l '*release-*'|head -n 1 |tee ../checker/current-release.txt
      - name: Check for modified files
        id: git-check
        run: |
          cd checker
          echo ::set-output name=modified::$([ -z "`git status --porcelain`" ] && echo "false" || echo "true")
      - name: Output debug info
        run: |
          cd checker
          echo -n Dir:
          pwd
          echo File list:
          ls -la
          echo Changed files list:
          git status --porcelain
          echo current-release.txt:
          cat current-release.txt
      - name: Commit latest release version
        if: steps.git-check.outputs.modified == 'true'
        run: |
          cd checker
          git config --global user.name 'Update check pipeline'
          git config --global user.email 'notepass@proton.me'
          echo "Creating branch $(cat current-release.txt)"
          git branch "$(cat current-release.txt)"
          echo "Adding modified files"
          git add -A
          echo "Creating commit"
          git commit -am "Updating latest detected release version to $(cat current-release.txt)"
          #echo "Creating tag"
          #git tag -a "$(cat current-release.txt)" -m "Trigger for build pipeline to create release $(cat current-release.txt)"
          echo "Pushing"
          git push
#          git branch "$(cat current-release.txt)"
#          git push